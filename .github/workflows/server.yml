name: Java CI with Gradle

on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      SPRING_MAIL_USERNAME: ${{ secrets.SPRING_MAIL_USERNAME }}
      SPRING_MAIL_PASSWORD: ${{ secrets.SPRING_MAIL_PASSWORD }}
#      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
#      RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
#      MYSQL_USER: ${{ secrets.MYSQL_USER }}
#      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Set active profile for Spring Boot
        run: echo "SPRING_PROFILES_ACTIVE=server" # =server, =local 로 환경설정
      - name: Build with Gradle
        run: ./gradlew build -x test
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t project-cicd .
          docker tag project-cicd hogeun99/project-cicd:${GITHUB_SHA::7}
          docker push hogeun99/project-cicd:${GITHUB_SHA::7}
      #아래부턴 CI가아닌 CD를 위한 스크립트
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Start Session Manager session
        run: aws ssm start-session --target i-0237f7ee34a8bedd7
      - name: Deploy to Server
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          aws ssm send-command \
            --instance-ids i-0237f7ee34a8bedd7 \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'if sudo docker ps -a --format \\'{{.Names}}\\' | grep -q \\'^server$\\'; then',
              '  sudo docker stop server',
              '  sudo docker rm server',
              'fi',
              'sudo docker pull hogeun99/project-cicd:${GITHUB_SHA::7}',
              'sudo docker tag hogeun99/project-cicd:${GITHUB_SHA::7} project-cicd',
              'sudo docker run -d --name server -p 8080:8080 \\
                -v /home/ubuntu/fileImage:/app/fileImage \\
                -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \\
                -e ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }} \\
                -e SPRING_MAIL_USERNAME=${{ secrets.SPRING_MAIL_USERNAME }} \\
                -e SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }} \\
                -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \\
                -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \\
                -e AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} \\
                project-cicd'
            ]" \
            --output text